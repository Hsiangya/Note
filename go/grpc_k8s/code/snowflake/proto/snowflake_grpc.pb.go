// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: proto/snowflake.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SnowFlake_GetId_FullMethodName = "/proto.SnowFlake/GetId"
)

// SnowFlakeClient is the client API for SnowFlake service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnowFlakeClient interface {
	GetId(ctx context.Context, in *Num, opts ...grpc.CallOption) (*Ids, error)
}

type snowFlakeClient struct {
	cc grpc.ClientConnInterface
}

func NewSnowFlakeClient(cc grpc.ClientConnInterface) SnowFlakeClient {
	return &snowFlakeClient{cc}
}

func (c *snowFlakeClient) GetId(ctx context.Context, in *Num, opts ...grpc.CallOption) (*Ids, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ids)
	err := c.cc.Invoke(ctx, SnowFlake_GetId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnowFlakeServer is the server API for SnowFlake service.
// All implementations must embed UnimplementedSnowFlakeServer
// for forward compatibility
type SnowFlakeServer interface {
	GetId(context.Context, *Num) (*Ids, error)
	mustEmbedUnimplementedSnowFlakeServer()
}

// UnimplementedSnowFlakeServer must be embedded to have forward compatible implementations.
type UnimplementedSnowFlakeServer struct {
}

func (UnimplementedSnowFlakeServer) GetId(context.Context, *Num) (*Ids, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetId not implemented")
}
func (UnimplementedSnowFlakeServer) mustEmbedUnimplementedSnowFlakeServer() {}

// UnsafeSnowFlakeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnowFlakeServer will
// result in compilation errors.
type UnsafeSnowFlakeServer interface {
	mustEmbedUnimplementedSnowFlakeServer()
}

func RegisterSnowFlakeServer(s grpc.ServiceRegistrar, srv SnowFlakeServer) {
	s.RegisterService(&SnowFlake_ServiceDesc, srv)
}

func _SnowFlake_GetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Num)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowFlakeServer).GetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnowFlake_GetId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowFlakeServer).GetId(ctx, req.(*Num))
	}
	return interceptor(ctx, in, info, handler)
}

// SnowFlake_ServiceDesc is the grpc.ServiceDesc for SnowFlake service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnowFlake_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SnowFlake",
	HandlerType: (*SnowFlakeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetId",
			Handler:    _SnowFlake_GetId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/snowflake.proto",
}
