// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: user_growth.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserCoin_ListTasks_FullMethodName       = "/UserGrowth.UserCoin/ListTasks"
	UserCoin_UserCoinInfo_FullMethodName    = "/UserGrowth.UserCoin/UserCoinInfo"
	UserCoin_UserCoinDetails_FullMethodName = "/UserGrowth.UserCoin/UserCoinDetails"
	UserCoin_UserCoinChange_FullMethodName  = "/UserGrowth.UserCoin/UserCoinChange"
)

// UserCoinClient is the client API for UserCoin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 服务
type UserCoinClient interface {
	// 获取所有的积分任务列表
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksReply, error)
	// 获取用户的积分信息
	UserCoinInfo(ctx context.Context, in *UserCoinInfoRequest, opts ...grpc.CallOption) (*UserCoinInfoReply, error)
	// 获取用户的积分明细列表
	UserCoinDetails(ctx context.Context, in *UserCoinDetailsRequest, opts ...grpc.CallOption) (*UserCoinDetailsReply, error)
	// 调整用户积分-奖励和惩罚都是用这个接口
	UserCoinChange(ctx context.Context, in *UserCoinChangeRequest, opts ...grpc.CallOption) (*UserCoinChangeReply, error)
}

type userCoinClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCoinClient(cc grpc.ClientConnInterface) UserCoinClient {
	return &userCoinClient{cc}
}

func (c *userCoinClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTasksReply)
	err := c.cc.Invoke(ctx, UserCoin_ListTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCoinClient) UserCoinInfo(ctx context.Context, in *UserCoinInfoRequest, opts ...grpc.CallOption) (*UserCoinInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserCoinInfoReply)
	err := c.cc.Invoke(ctx, UserCoin_UserCoinInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCoinClient) UserCoinDetails(ctx context.Context, in *UserCoinDetailsRequest, opts ...grpc.CallOption) (*UserCoinDetailsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserCoinDetailsReply)
	err := c.cc.Invoke(ctx, UserCoin_UserCoinDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCoinClient) UserCoinChange(ctx context.Context, in *UserCoinChangeRequest, opts ...grpc.CallOption) (*UserCoinChangeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserCoinChangeReply)
	err := c.cc.Invoke(ctx, UserCoin_UserCoinChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCoinServer is the server API for UserCoin service.
// All implementations must embed UnimplementedUserCoinServer
// for forward compatibility
//
// 服务
type UserCoinServer interface {
	// 获取所有的积分任务列表
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksReply, error)
	// 获取用户的积分信息
	UserCoinInfo(context.Context, *UserCoinInfoRequest) (*UserCoinInfoReply, error)
	// 获取用户的积分明细列表
	UserCoinDetails(context.Context, *UserCoinDetailsRequest) (*UserCoinDetailsReply, error)
	// 调整用户积分-奖励和惩罚都是用这个接口
	UserCoinChange(context.Context, *UserCoinChangeRequest) (*UserCoinChangeReply, error)
	mustEmbedUnimplementedUserCoinServer()
}

// UnimplementedUserCoinServer must be embedded to have forward compatible implementations.
type UnimplementedUserCoinServer struct {
}

func (UnimplementedUserCoinServer) ListTasks(context.Context, *ListTasksRequest) (*ListTasksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedUserCoinServer) UserCoinInfo(context.Context, *UserCoinInfoRequest) (*UserCoinInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCoinInfo not implemented")
}
func (UnimplementedUserCoinServer) UserCoinDetails(context.Context, *UserCoinDetailsRequest) (*UserCoinDetailsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCoinDetails not implemented")
}
func (UnimplementedUserCoinServer) UserCoinChange(context.Context, *UserCoinChangeRequest) (*UserCoinChangeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCoinChange not implemented")
}
func (UnimplementedUserCoinServer) mustEmbedUnimplementedUserCoinServer() {}

// UnsafeUserCoinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCoinServer will
// result in compilation errors.
type UnsafeUserCoinServer interface {
	mustEmbedUnimplementedUserCoinServer()
}

func RegisterUserCoinServer(s grpc.ServiceRegistrar, srv UserCoinServer) {
	s.RegisterService(&UserCoin_ServiceDesc, srv)
}

func _UserCoin_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCoinServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCoin_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCoinServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCoin_UserCoinInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCoinInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCoinServer).UserCoinInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCoin_UserCoinInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCoinServer).UserCoinInfo(ctx, req.(*UserCoinInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCoin_UserCoinDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCoinDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCoinServer).UserCoinDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCoin_UserCoinDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCoinServer).UserCoinDetails(ctx, req.(*UserCoinDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCoin_UserCoinChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCoinChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCoinServer).UserCoinChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCoin_UserCoinChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCoinServer).UserCoinChange(ctx, req.(*UserCoinChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCoin_ServiceDesc is the grpc.ServiceDesc for UserCoin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCoin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserGrowth.UserCoin",
	HandlerType: (*UserCoinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTasks",
			Handler:    _UserCoin_ListTasks_Handler,
		},
		{
			MethodName: "UserCoinInfo",
			Handler:    _UserCoin_UserCoinInfo_Handler,
		},
		{
			MethodName: "UserCoinDetails",
			Handler:    _UserCoin_UserCoinDetails_Handler,
		},
		{
			MethodName: "UserCoinChange",
			Handler:    _UserCoin_UserCoinChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_growth.proto",
}

const (
	UserGrade_ListGrades_FullMethodName          = "/UserGrowth.UserGrade/ListGrades"
	UserGrade_ListGradePrivileges_FullMethodName = "/UserGrowth.UserGrade/ListGradePrivileges"
	UserGrade_CheckUserPrivilege_FullMethodName  = "/UserGrowth.UserGrade/CheckUserPrivilege"
	UserGrade_UserGradeInfo_FullMethodName       = "/UserGrowth.UserGrade/UserGradeInfo"
	UserGrade_UserGradeChange_FullMethodName     = "/UserGrowth.UserGrade/UserGradeChange"
)

// UserGradeClient is the client API for UserGrade service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserGradeClient interface {
	// 获取所有的等级信息列表
	ListGrades(ctx context.Context, in *ListGradesRequest, opts ...grpc.CallOption) (*ListGradesReply, error)
	// 获取等级的特权列表
	ListGradePrivileges(ctx context.Context, in *ListGradePrivilegesRequest, opts ...grpc.CallOption) (*ListGradePrivilegesReply, error)
	// 检查用户是否有某个产品的特权
	CheckUserPrivilege(ctx context.Context, in *CheckUserPrivilegeRequest, opts ...grpc.CallOption) (*CheckUserPrivilegeReply, error)
	// 获取用户的等级信息
	UserGradeInfo(ctx context.Context, in *UserGradeInfoRequest, opts ...grpc.CallOption) (*UserGradeInfoReply, error)
	// 调整用户的等级成长值
	UserGradeChange(ctx context.Context, in *UserGradeChangeRequest, opts ...grpc.CallOption) (*UserGradeChangeReply, error)
}

type userGradeClient struct {
	cc grpc.ClientConnInterface
}

func NewUserGradeClient(cc grpc.ClientConnInterface) UserGradeClient {
	return &userGradeClient{cc}
}

func (c *userGradeClient) ListGrades(ctx context.Context, in *ListGradesRequest, opts ...grpc.CallOption) (*ListGradesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGradesReply)
	err := c.cc.Invoke(ctx, UserGrade_ListGrades_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGradeClient) ListGradePrivileges(ctx context.Context, in *ListGradePrivilegesRequest, opts ...grpc.CallOption) (*ListGradePrivilegesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGradePrivilegesReply)
	err := c.cc.Invoke(ctx, UserGrade_ListGradePrivileges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGradeClient) CheckUserPrivilege(ctx context.Context, in *CheckUserPrivilegeRequest, opts ...grpc.CallOption) (*CheckUserPrivilegeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckUserPrivilegeReply)
	err := c.cc.Invoke(ctx, UserGrade_CheckUserPrivilege_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGradeClient) UserGradeInfo(ctx context.Context, in *UserGradeInfoRequest, opts ...grpc.CallOption) (*UserGradeInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserGradeInfoReply)
	err := c.cc.Invoke(ctx, UserGrade_UserGradeInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGradeClient) UserGradeChange(ctx context.Context, in *UserGradeChangeRequest, opts ...grpc.CallOption) (*UserGradeChangeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserGradeChangeReply)
	err := c.cc.Invoke(ctx, UserGrade_UserGradeChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserGradeServer is the server API for UserGrade service.
// All implementations must embed UnimplementedUserGradeServer
// for forward compatibility
type UserGradeServer interface {
	// 获取所有的等级信息列表
	ListGrades(context.Context, *ListGradesRequest) (*ListGradesReply, error)
	// 获取等级的特权列表
	ListGradePrivileges(context.Context, *ListGradePrivilegesRequest) (*ListGradePrivilegesReply, error)
	// 检查用户是否有某个产品的特权
	CheckUserPrivilege(context.Context, *CheckUserPrivilegeRequest) (*CheckUserPrivilegeReply, error)
	// 获取用户的等级信息
	UserGradeInfo(context.Context, *UserGradeInfoRequest) (*UserGradeInfoReply, error)
	// 调整用户的等级成长值
	UserGradeChange(context.Context, *UserGradeChangeRequest) (*UserGradeChangeReply, error)
	mustEmbedUnimplementedUserGradeServer()
}

// UnimplementedUserGradeServer must be embedded to have forward compatible implementations.
type UnimplementedUserGradeServer struct {
}

func (UnimplementedUserGradeServer) ListGrades(context.Context, *ListGradesRequest) (*ListGradesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGrades not implemented")
}
func (UnimplementedUserGradeServer) ListGradePrivileges(context.Context, *ListGradePrivilegesRequest) (*ListGradePrivilegesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGradePrivileges not implemented")
}
func (UnimplementedUserGradeServer) CheckUserPrivilege(context.Context, *CheckUserPrivilegeRequest) (*CheckUserPrivilegeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserPrivilege not implemented")
}
func (UnimplementedUserGradeServer) UserGradeInfo(context.Context, *UserGradeInfoRequest) (*UserGradeInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGradeInfo not implemented")
}
func (UnimplementedUserGradeServer) UserGradeChange(context.Context, *UserGradeChangeRequest) (*UserGradeChangeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGradeChange not implemented")
}
func (UnimplementedUserGradeServer) mustEmbedUnimplementedUserGradeServer() {}

// UnsafeUserGradeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserGradeServer will
// result in compilation errors.
type UnsafeUserGradeServer interface {
	mustEmbedUnimplementedUserGradeServer()
}

func RegisterUserGradeServer(s grpc.ServiceRegistrar, srv UserGradeServer) {
	s.RegisterService(&UserGrade_ServiceDesc, srv)
}

func _UserGrade_ListGrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGradeServer).ListGrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGrade_ListGrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGradeServer).ListGrades(ctx, req.(*ListGradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrade_ListGradePrivileges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGradePrivilegesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGradeServer).ListGradePrivileges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGrade_ListGradePrivileges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGradeServer).ListGradePrivileges(ctx, req.(*ListGradePrivilegesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrade_CheckUserPrivilege_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserPrivilegeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGradeServer).CheckUserPrivilege(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGrade_CheckUserPrivilege_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGradeServer).CheckUserPrivilege(ctx, req.(*CheckUserPrivilegeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrade_UserGradeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGradeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGradeServer).UserGradeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGrade_UserGradeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGradeServer).UserGradeInfo(ctx, req.(*UserGradeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrade_UserGradeChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGradeChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGradeServer).UserGradeChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGrade_UserGradeChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGradeServer).UserGradeChange(ctx, req.(*UserGradeChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserGrade_ServiceDesc is the grpc.ServiceDesc for UserGrade service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserGrade_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserGrowth.UserGrade",
	HandlerType: (*UserGradeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGrades",
			Handler:    _UserGrade_ListGrades_Handler,
		},
		{
			MethodName: "ListGradePrivileges",
			Handler:    _UserGrade_ListGradePrivileges_Handler,
		},
		{
			MethodName: "CheckUserPrivilege",
			Handler:    _UserGrade_CheckUserPrivilege_Handler,
		},
		{
			MethodName: "UserGradeInfo",
			Handler:    _UserGrade_UserGradeInfo_Handler,
		},
		{
			MethodName: "UserGradeChange",
			Handler:    _UserGrade_UserGradeChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_growth.proto",
}
